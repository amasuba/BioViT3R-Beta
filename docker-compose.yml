version: '3.8'

services:
  biovitr-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: biovitr-beta
    ports:
      - "7860:7860"
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./outputs:/app/outputs
      - ./logs:/app/logs
      - ./configs:/app/configs
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - PYTHONPATH=/app
      - IBM_WATSON_APIKEY=${IBM_WATSON_APIKEY}
      - IBM_PROJECT_ID=${IBM_PROJECT_ID}
      - IBM_WATSON_URL=${IBM_WATSON_URL}
      - WANDB_API_KEY=${WANDB_API_KEY}
    env_file:
      - .env
    runtime: nvidia
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    restart: unless-stopped
    networks:
      - biovitr-network

  redis:
    image: redis:7-alpine
    container_name: biovitr-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    networks:
      - biovitr-network

  nginx:
    image: nginx:alpine
    container_name: biovitr-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
    depends_on:
      - biovitr-app
    restart: unless-stopped
    networks:
      - biovitr-network

  # Optional: Database for storing analysis results
  postgres:
    image: postgres:14-alpine
    container_name: biovitr-postgres
    environment:
      POSTGRES_DB: biovitr
      POSTGRES_USER: biovitr
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - biovitr-network

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: biovitr-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - biovitr-network

  # Optional: Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: biovitr-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
    restart: unless-stopped
    networks:
      - biovitr-network

networks:
  biovitr-network:
    driver: bridge

volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local